# -*- coding: utf-8 -*-
"""Deploy ML Models as Service with FastAPI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wolyhPraO8bHM_uPpRSylyZSeSYUTz2D
"""

import pickle
import logging
# from pyngrok import ngrok
from pydantic import BaseModel
from fastapi import FastAPI
import uvicorn
# import nest_asyncio

# Define the FastAPI app
app = FastAPI()


@app.get("/")
async def read_root():
    return {"message": "Welcome!"}

# Initialize logging
my_logger = logging.getLogger()
my_logger.setLevel(logging.DEBUG)
logging.basicConfig(level=logging.DEBUG, filename='logs.log')

model = None
diabetes_model = None

# Define the request body schema


class HeartDataInput(BaseModel):
    Thallium: float
    Num_Vessels_Fluro: float
    Exercise_Angina: float
    Chest_Pain_Type: float
    ST_Depression: float
    Sex: float
    Max_HR: float
    EKG_Results: float

# Define the output data schema


class HeartDataOutput(BaseModel):
    risk_score: int


@app.on_event("startup")
def load_model():
    global model, diabetes_model
    model = pickle.load(open("svm_model.pkl", "rb"))
    diabetes_model = pickle.load(open("dbs_svm_model.pkl", "rb"))
    # diabetes_model = pickle.load(open("classifier_model.pkl", "rb"))

# Define the prediction endpoint


@app.post("/predict")
async def predict_heart_disease(input_data: HeartDataInput):
    print(input_data)
    try:
        # Convert the request body to a numpy array
        input_features = [[input_data.Thallium, input_data.Num_Vessels_Fluro, input_data.Exercise_Angina,
                           input_data.Chest_Pain_Type, input_data.ST_Depression, input_data.Sex,
                           input_data.Max_HR, input_data.EKG_Results]]

        # Use the SVM model to predict the heart disease risk
        prediction = model.predict(input_features)

        # Return the prediction as a JSON response
        return HeartDataOutput(risk_score=int(prediction[0]))
    except:
        my_logger.error("Something went wrong!")
        return {"prediction": "error"}


# 'Age', 'HeartDiseaseorAttack', 'HighChol', 'BMI', 'HighBP', 'GenHlth', 'HvyAlcoholConsump',
# 'CholCheck', 'Income', 'Sex', 'PhysHlth', 'DiffWalk', 'MentHlth', 'Stroke', 'Education', 'Veggies'

# Define the request body schema


class DiabetesDataInput(BaseModel):
    Gender: float
    Polyuria: float
    Polydipsia: float
    Genital_thrush: float
    Itching: float
    Irritability: float

# Define the output data schema


class DiabetesDataOutput(BaseModel):
    risk_score: int

# Define the prediction endpoint


@app.post("/predict/diabetes")
async def predict_diabetes_disease(input_data: DiabetesDataInput):
    try:
        # Convert the request body to a numpy array
        d_input_features = [[input_data.Gender, input_data.Genital_thrush, input_data.Irritability,
                             input_data.Irritability, input_data.Polydipsia, input_data.Itching,
                             input_data.Polyuria]]

        print(input_data)

        # Use the SVM model to predict the heart disease risk
        db_prediction = diabetes_model.predict(d_input_features)

        # Return the prediction as a JSON response
        return DiabetesDataOutput(risk_score=int(db_prediction[0]))
    except:
        my_logger.error("Something went wrong!")
        return {"prediction": "error"}
